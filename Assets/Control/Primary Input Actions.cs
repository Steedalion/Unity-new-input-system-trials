//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Control/Primary Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PrimaryInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PrimaryInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Primary Input Actions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""a8ef6303-93c2-42a5-bcf0-a4c08e3a6175"",
            ""actions"": [
                {
                    ""name"": ""Next Vehicle"",
                    ""type"": ""Button"",
                    ""id"": ""6dcd9256-37f6-4129-be00-87538b0d3efb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Reset Vehicle"",
                    ""type"": ""Button"",
                    ""id"": ""d7e647ae-1179-427e-a0fb-429b34c8fdc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""Button"",
                    ""id"": ""c358d461-929e-4082-957a-5efc05f1bfbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Value"",
                    ""id"": ""3b69f592-268c-48de-9e40-88daac8446e5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Steering Angle"",
                    ""type"": ""Value"",
                    ""id"": ""1c000f69-82d0-4c4c-a296-e132a36055fb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f740248d-a67c-456a-93d0-ea1748cd0f44"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Vehicle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""559e5a72-76c7-4897-bbc5-3ba5efad7768"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset Vehicle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b05710ea-a21c-4b85-b0d5-a9e758098e83"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a2bd2c82-9591-438a-8080-468c92930f8c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1ef602ce-3db7-4102-96a2-467e249b23fd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3b7f2275-2e03-48eb-bc83-e46232036dc6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1ca2af36-790e-4b3a-ab2f-503082ccb5d7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering Angle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a7b3281c-86c2-42de-9edd-107589e1c62d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering Angle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e2c4ba82-292a-473f-aa25-001736e10e08"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering Angle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Driving"",
            ""id"": ""36e3122a-e446-4b83-92b2-c0d83b417206"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cf505b9a-d846-4940-9dc8-7d8d51c904ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94b69513-7fdc-4d67-989b-2bf97338a8d1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map"",
            ""id"": ""fde22dda-3eab-4556-9d0e-6d3960715ce2"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""40f830b0-e74c-4a44-85f9-7c7e689f996f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19523032-59b0-4e21-b1d9-61a11f3b385c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_NextVehicle = m_Gameplay.FindAction("Next Vehicle", throwIfNotFound: true);
        m_Gameplay_ResetVehicle = m_Gameplay.FindAction("Reset Vehicle", throwIfNotFound: true);
        m_Gameplay_Handbrake = m_Gameplay.FindAction("Handbrake", throwIfNotFound: true);
        m_Gameplay_Acceleration = m_Gameplay.FindAction("Acceleration", throwIfNotFound: true);
        m_Gameplay_SteeringAngle = m_Gameplay.FindAction("Steering Angle", throwIfNotFound: true);
        // Driving
        m_Driving = asset.FindActionMap("Driving", throwIfNotFound: true);
        m_Driving_Newaction = m_Driving.FindAction("New action", throwIfNotFound: true);
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Newaction = m_Newactionmap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_NextVehicle;
    private readonly InputAction m_Gameplay_ResetVehicle;
    private readonly InputAction m_Gameplay_Handbrake;
    private readonly InputAction m_Gameplay_Acceleration;
    private readonly InputAction m_Gameplay_SteeringAngle;
    public struct GameplayActions
    {
        private @PrimaryInputActions m_Wrapper;
        public GameplayActions(@PrimaryInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextVehicle => m_Wrapper.m_Gameplay_NextVehicle;
        public InputAction @ResetVehicle => m_Wrapper.m_Gameplay_ResetVehicle;
        public InputAction @Handbrake => m_Wrapper.m_Gameplay_Handbrake;
        public InputAction @Acceleration => m_Wrapper.m_Gameplay_Acceleration;
        public InputAction @SteeringAngle => m_Wrapper.m_Gameplay_SteeringAngle;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @NextVehicle.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnNextVehicle;
                @NextVehicle.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnNextVehicle;
                @NextVehicle.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnNextVehicle;
                @ResetVehicle.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetVehicle;
                @ResetVehicle.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetVehicle;
                @ResetVehicle.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnResetVehicle;
                @Handbrake.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHandbrake;
                @Handbrake.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHandbrake;
                @Handbrake.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnHandbrake;
                @Acceleration.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAcceleration;
                @Acceleration.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAcceleration;
                @Acceleration.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAcceleration;
                @SteeringAngle.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSteeringAngle;
                @SteeringAngle.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSteeringAngle;
                @SteeringAngle.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSteeringAngle;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextVehicle.started += instance.OnNextVehicle;
                @NextVehicle.performed += instance.OnNextVehicle;
                @NextVehicle.canceled += instance.OnNextVehicle;
                @ResetVehicle.started += instance.OnResetVehicle;
                @ResetVehicle.performed += instance.OnResetVehicle;
                @ResetVehicle.canceled += instance.OnResetVehicle;
                @Handbrake.started += instance.OnHandbrake;
                @Handbrake.performed += instance.OnHandbrake;
                @Handbrake.canceled += instance.OnHandbrake;
                @Acceleration.started += instance.OnAcceleration;
                @Acceleration.performed += instance.OnAcceleration;
                @Acceleration.canceled += instance.OnAcceleration;
                @SteeringAngle.started += instance.OnSteeringAngle;
                @SteeringAngle.performed += instance.OnSteeringAngle;
                @SteeringAngle.canceled += instance.OnSteeringAngle;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Driving
    private readonly InputActionMap m_Driving;
    private IDrivingActions m_DrivingActionsCallbackInterface;
    private readonly InputAction m_Driving_Newaction;
    public struct DrivingActions
    {
        private @PrimaryInputActions m_Wrapper;
        public DrivingActions(@PrimaryInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Driving_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Driving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivingActions set) { return set.Get(); }
        public void SetCallbacks(IDrivingActions instance)
        {
            if (m_Wrapper.m_DrivingActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_DrivingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public DrivingActions @Driving => new DrivingActions(this);

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private INewactionmapActions m_NewactionmapActionsCallbackInterface;
    private readonly InputAction m_Newactionmap_Newaction;
    public struct NewactionmapActions
    {
        private @PrimaryInputActions m_Wrapper;
        public NewactionmapActions(@PrimaryInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Newactionmap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void SetCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_NewactionmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    public interface IGameplayActions
    {
        void OnNextVehicle(InputAction.CallbackContext context);
        void OnResetVehicle(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
        void OnAcceleration(InputAction.CallbackContext context);
        void OnSteeringAngle(InputAction.CallbackContext context);
    }
    public interface IDrivingActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface INewactionmapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
